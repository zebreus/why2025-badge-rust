use std::path::Path;
use anyhow::{Result, Context};
use serde::Serialize;
use cargo_util_schemas::manifest::TomlManifest;

#[derive(Debug, Serialize)]
pub struct Metadata {
    _comment: &'static str,
    unique_identifier: String,
    name: String,
    author: String,
    version: String,
    interpreter: String,
    metadata_file: String,
    description: String,
    binary_path: String,
    source: u32,
}

impl Metadata {
    pub fn parse(path: &Path) -> Result<Self> {
        let contents = std::fs::read_to_string(path)?;
        let manifest: TomlManifest = toml::from_str(&contents)?;
        let package = manifest.package().context("no [package] section")?;

        let name = package
            .normalized_name()
            .map(|n| n.clone().into_inner())
            .context("no package.name")?;

        let version = package
            .version
            .as_ref()
            .and_then(|v| Some(v.as_value()?.to_string()))
            .context("no package.version")?;

        Ok(Self {
            _comment: "THIS FILE IS AUTOGENERATED! DO NOT TOUCH!",
            unique_identifier: name.clone(),
            name: name.clone(),
            author: package
                .authors
                .as_ref()
                .cloned()
                .and_then(|vs| vs.as_value()?.first().cloned())
                .unwrap_or_default(),
            version: version.clone(),
            interpreter: String::new(),
            metadata_file: String::new(),
            description: package
                .description
                .as_ref()
                .and_then(|d| d.as_value())
                .map_or(String::new(), |x| x.clone()),
            binary_path: format!("{name}.elf"),
            source: 1,
        })
    }
    
    pub fn to_json(&self) -> Result<String> {
        serde_json::to_string_pretty(self).context("failed to serialize metadata")
    }

    pub fn generate(&self, target_dir: &Path) -> Result<()> {
        std::fs::write(target_dir.join("metadata.json"), self.to_json()?)?;
        std::fs::write(target_dir.join("version.txt"), &self.version)?;
        Ok(())
    }
}

pub fn generate(manifest: impl AsRef<Path>, target_dir: impl AsRef<Path>) -> Result<()> {
    Metadata::parse(manifest.as_ref())?.generate(target_dir.as_ref())
}
